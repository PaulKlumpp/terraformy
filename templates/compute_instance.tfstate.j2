{
    "version": 3,
    "terraform_version": "0.10.3",
    "serial": 3,
    "modules": [
        {
            "path": [
                "root"
            ],
            "outputs": {},
            "resources": {
                {% for instance in instances %}
                "google_compute_instance.{{ instance['name'] }}": {
                    "type": "google_compute_instance",
                    "depends_on": [],
                    "primary": {
                        "id": "{{ instance['name'] }}",
                        "attributes": {
                            {%- set boot_disk = get_boot_disk_info(instance['disks']) %}
                            {% set other_disks = get_other_disks(instance['disks'], boot_disk['index']) -%}
                            {%- if other_disks|length > 0 -%}
                            "attached_disk.#": "{{ other_disks | length }}",
                            {% for disk in other_disks -%}
                            "attached_disk.{{ loop.index -1 }}.device_name": "{{ disk['deviceName'] }}",
                            "attached_disk.{{ loop.index -1  }}.disk_encryption_key_raw": "",
                            "attached_disk.{{ loop.index -1 }}.disk_encryption_key_sha256": "",
                            "attached_disk.{{ loop.index -1 }}.source": "{{ disk['source'] }}",
                            {% endfor -%}
                            {% else -%}
                            "attached_disk.#": "0",
                            {% endif -%}
                            "boot_disk.#": "1",
                            "boot_disk.0.auto_delete": "{{ instance['disks'][boot_disk['index']]['autoDelete'] | lower }}",
                            "boot_disk.0.device_name": "{{ instance['disks'][boot_disk['index']]['deviceName'] }}",
                            {% if not boot_disk['existing'] -%}
                            "boot_disk.0.initialize_params.#": "1",
                            "boot_disk.0.initialize_params.0.image": "{{ boot_disk['source_image'] }}",
                            "boot_disk.0.initialize_params.0.size": "{{ boot_disk['size'] }}",
                            "boot_disk.0.initialize_params.0.type": "{{ boot_disk['type'] }}",
                            {% else -%}
                            "boot_disk.0.initialize_params.#": "0",
                            "boot_disk.0.source": "{{ boot_disk['name'] }}",
                            {% endif -%}
                            "can_ip_forward": "{{ instance['canIpForward'] | lower }}",
                            "id": "{{ instance['name'] }}",
                            "machine_type": "{{ instance['machineType'].rsplit('/', 1)[-1] }}",
                            {%- if 'items' in instance['metadata'] -%}
                            {% for i in instance['metadata']['items'] %}
                            "metadata.{{ i['key'] }}": "{{ i['value'] }}",
                            {%- endfor %}
                            {%- endif %}
                            "name": "{{ instance['name'] }}",
                            {% for int in instance['networkInterfaces'] -%}
                            "network.#": "0",
                            "network_interface.#": "1",
                            {% if 'accessConfigs' in int -%}
                            "network_interface.0.access_config.#": "1",
                            {%- else -%}
                            "network_interface.0.access_config.#": "0",
                            {%- endif %}
                            "network_interface.0.address": "{{ int['networkIP'] }}",
                            {%- endfor %}
                            "scheduling.#": "1",
                            "scheduling.0.automatic_restart": "{{ instance['scheduling']['automaticRestart'] | lower }}",
                            "scheduling.0.on_host_maintenance": "{{ instance['scheduling']['onHostMaintenance'] }}",
                            "scheduling.0.preemptible": "{{ instance['scheduling']['preemptible'] | lower }}",
                            "zone": "{{ instance['zone'].rsplit('/', 1)[-1] }}"
                        },
                        "meta": {
                            "schema_version": "2"
                        },
                        "tainted": false
                    },
                    "deposed": [],
                    "provider": ""
                }{{ "," if not loop.last }}
                {%- endfor %}
            },
            "depends_on": []
        }
    ]
}
